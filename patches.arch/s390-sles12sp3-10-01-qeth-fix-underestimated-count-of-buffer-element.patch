From: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Subject: s390/qeth: fix underestimated count of buffer elements
Patch-mainline: v4.16-rc1
Git-commit: 89271c65edd599207dd982007900506283c90ae3
References: bnc#1082089, LTC#164529

Description:  qeth: fix calculation of required buffer elements for skb
Symptom:      Repeated device recovery due to Subchannel Program Checks
Problem:      skbs of certain lengths cause qeth to miscalculate the
              number of needed IO buffer elements, resulting in
              malformed TX buffer descriptors. When such a buffer is
              presented to the HW, it triggers a Subchannel Program
              Check. qeth handles this by starting device recovery.
Solution:     Fix the buffer element calculation, so that qeth builds
              proper TX buffer descriptors.
Reproduction: Occurs for skbs where the last byte of the linear data
              range / of a page frag sits on a page boundary.

Upstream-Description:

              s390/qeth: fix underestimated count of buffer elements

              For a memory range/skb where the last byte falls onto a page boundary
              (ie. 'end' is of the form xxx...xxx001), the PFN_UP() part of the
              calculation currently doesn't round up to the next PFN due to an
              off-by-one error.
              Thus qeth believes that the skb occupies one page less than it
              actually does, and may select a IO buffer that doesn't have enough spare
              buffer elements to fit all of the skb's data.
              HW detects this as a malformed buffer descriptor, and raises an
              exception which then triggers device recovery.

              Fixes: 2863c61334aa ("qeth: refactor calculation of SBALE count")
              Signed-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
              Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
              Signed-off-by: David S. Miller <davem@davemloft.net>


Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 drivers/s390/net/qeth_core_main.c |    4 ++--
 drivers/s390/net/qeth_l3_main.c   |    2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@ -3817,7 +3817,7 @@ int qeth_get_elements_for_frags(struct s
 		data = (char *)page_to_phys(skb_frag_page(frag)) +
 			frag->page_offset;
 		length = frag->size;
-		e = PFN_UP((unsigned long)data + length - 1) -
+		e = PFN_UP((unsigned long)data + length) -
 			PFN_DOWN((unsigned long)data);
 		elements += e;
 	}
@@ -3829,7 +3829,7 @@ int qeth_get_elements_no(struct qeth_car
 		     struct sk_buff *skb, int elems, int data_offset)
 {
 	int dlen = skb->len - skb->data_len;
-	int elements_needed = PFN_UP((unsigned long)skb->data + dlen - 1) -
+	int elements_needed = PFN_UP((unsigned long)skb->data + dlen) -
 		PFN_DOWN((unsigned long)skb->data + data_offset);
 
 	elements_needed += qeth_get_elements_for_frags(skb);
--- a/drivers/s390/net/qeth_l3_main.c
+++ b/drivers/s390/net/qeth_l3_main.c
@@ -2843,7 +2843,7 @@ static inline int qeth_l3_tso_elements(s
 	unsigned long tcpd = (unsigned long)tcp_hdr(skb) +
 		tcp_hdr(skb)->doff * 4;
 	int tcpd_len = skb_headlen(skb) - (tcpd - (unsigned long)skb->data);
-	int elements = PFN_UP(tcpd + tcpd_len - 1) - PFN_DOWN(tcpd);
+	int elements = PFN_UP(tcpd + tcpd_len) - PFN_DOWN(tcpd);
 
 	elements += qeth_get_elements_for_frags(skb);
 
