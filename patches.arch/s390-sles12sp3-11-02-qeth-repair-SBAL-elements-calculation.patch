From: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Subject: qeth: repair SBAL elements calculation
Patch-mainline: v4.5-rc1
Git-commit: 577777359e1f47d0cb7dfc23aac0da867a14af00
References: bnc#1085507, LTC#165484

Description:  qeth: fix TSO buffer element calculation
Symptom:      Excessive TSO skb linearizations, resulting in reduced
              performance.
Problem:      When sending skbs, qeth determines the number of qdio
              SBAL elements required. If qeth sends a fragmented skb,
              the SBAL element number calculation is wrong, because
              the fragmented data part is added twice in
              qeth_l3_tso_elements().
Solution:     In qeth_l3_tso_elements(), only handle the linear part
              of the skb.
Reproduction: TSO performance test.

Upstream-Description:

              qeth: repair SBAL elements calculation

              When sending skbs, qeth determines the number of qdio SBAL elements
              required. If qeth sends a fragmented skb, the SBAL element number
              calculation is wrong, because the fragmented data part is added
              twice in qeth_l3_tso_elements(). This patch makes sure fragmented
              data is handled in qeth_elements_for_frags() only, while
              qeth_l3_tso_elements() starts calculation of qdio SBAL elements just
              with the linear data part of the skb.

              Signed-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
              Reviewed-by: Thomas Richter <tmricht@linux.vnet.ibm.com>
              Signed-off-by: David S. Miller <davem@davemloft.net>


Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 drivers/s390/net/qeth_l3_main.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/drivers/s390/net/qeth_l3_main.c
+++ b/drivers/s390/net/qeth_l3_main.c
@@ -2842,7 +2842,7 @@ static inline int qeth_l3_tso_elements(s
 {
 	unsigned long tcpd = (unsigned long)tcp_hdr(skb) +
 		tcp_hdr(skb)->doff * 4;
-	int tcpd_len = skb->len - (tcpd - (unsigned long)skb->data);
+	int tcpd_len = skb_headlen(skb) - (tcpd - (unsigned long)skb->data);
 	int elements = PFN_UP(tcpd + tcpd_len - 1) - PFN_DOWN(tcpd);
 
 	elements += qeth_get_elements_for_frags(skb);
