From: Claudio Imbrenda <imbrenda@linux.vnet.ibm.com>
Subject: KVM: s390: Populate mask of non-hypervisor managed facility bits
Patch-mainline: v4.7-rc1
Git-commit: 60a37709ce603da62d0b60699b713558b4cfd513
References: FATE#324071, LTC#158956, bsc#1073059

Summary:     kernel: Transparent Facility Bit Handling
Description: When a guest is initializing, KVM provides facility bits that can
             be successfully used by the guest, by applying a mask to the
             bitfield returned by the STFLE instruction, so that only the
             facility bits actually supported by KVM are passed to the guest.
             
             Some facilities need support in the hypervisor in order to work,
             while others are handled by the system and do not need explicit
             support from the hypervisor.
             
             Until now the mask to select the bits to pass to the guest was
             maintained manually; this patchset allows KVM to pass to the guest
             all the facility bits that do not require hypervisor support.
             This allows new hardware features that do not need hypervisor
             support to be available for guests without having to patch the
             hypervisor every time.

Upstream-Description:

             KVM: s390: Populate mask of non-hypervisor managed facility bits

             When a guest is initializing, KVM provides facility bits that can be
             successfully used by the guest. It's done by applying
             kvm_s390_fac_list_mask mask on host facility bits stored by the STFLE
             instruction. Facility bits can be one of two kinds: it's either a
             hypervisor managed bit or non-hypervisor managed.

             The hardware provides information which bits need special handling.
             Let's automatically passthrough to guests new facility bits, that
             don't require hypervisor support.

             Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
             Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
             Reviewed-by: Eric Farman <farman@linux.vnet.ibm.com>
             Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>


Signed-off-by: Claudio Imbrenda <imbrenda@linux.vnet.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 arch/s390/kvm/kvm-s390.c |   17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

--- a/arch/s390/kvm/kvm-s390.c
+++ b/arch/s390/kvm/kvm-s390.c
@@ -120,8 +120,8 @@ struct kvm_stats_debugfs_item debugfs_en
 
 /* upper facilities limit for kvm */
 unsigned long kvm_s390_fac_list_mask[] = {
-	0xffe6ffffffffffffUL,
-	0x005effffffffffffUL,
+	0xffe6000000000000UL,
+	0x005e000000000000UL,
 };
 
 unsigned long kvm_s390_fac_list_mask_size(void)
@@ -2759,13 +2759,26 @@ void kvm_arch_commit_memory_region(struc
 	return;
 }
 
+static inline unsigned long nonhyp_mask(int i)
+{
+	unsigned int nonhyp_fai = (sclp.hmfai << i * 2) >> 30;
+
+	return 0x0000ffffffffffffUL >> (nonhyp_fai << 4);
+}
+
 static int __init kvm_s390_init(void)
 {
+	int i;
+
 	if (!sclp.has_sief2) {
 		pr_info("SIE not available\n");
 		return -ENODEV;
 	}
 
+	for (i = 0; i < 16; i++)
+		kvm_s390_fac_list_mask[i] |=
+			S390_lowcore.stfle_fac_list[i] & nonhyp_mask(i);
+
 	return kvm_init(NULL, sizeof(struct kvm_vcpu), 0, THIS_MODULE);
 }
 
