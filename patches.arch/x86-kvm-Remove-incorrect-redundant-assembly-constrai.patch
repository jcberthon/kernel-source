From cb7cb2864e758a1b040040bc55e404c677c911cb Mon Sep 17 00:00:00 2001
From: "H. Peter Anvin" <hpa@linux.intel.com>
Date: Wed, 21 Nov 2012 14:41:21 -0800
Subject: [PATCH] x86, kvm: Remove incorrect redundant assembly constraint
Git-commit: cb7cb2864e758a1b040040bc55e404c677c911cb
Patch-mainline: 3.7-rc8
References: bnc#931850

In __emulate_1op_rax_rdx, we use "+a" and "+d" which are input/output
constraints, and *then* use "a" and "d" as input constraints.  This is
incorrect, but happens to work on some versions of gcc.

However, it breaks gcc with -O0 and icc, and may break on future
versions of gcc.

Reported-and-tested-by: Melanie Blower <melanie.blower@intel.com>
Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
Link: http://lkml.kernel.org/r/B3584E72CFEBED439A3ECA9BCE67A4EF1B17AF90@FMSMSX107.amr.corp.intel.com
Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
Acked-by: Marcelo Tosatti <mtosatti@redhat.com>
Acked-by: Takashi Iwai <tiwai@suse.de>

---
 arch/x86/kvm/emulate.c |    3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@ -362,8 +362,7 @@ struct gprefix {
 			_ASM_EXTABLE(1b, 3b)				\
 			: "=m" (_eflags), "=&r" (_tmp),			\
 			  "+a" (_rax), "+d" (_rdx), "+qm"(_ex)		\
-			: "i" (EFLAGS_MASK), "m" ((_src).val),		\
-			  "a" (_rax), "d" (_rdx));			\
+			: "i" (EFLAGS_MASK), "m" ((_src).val));		\
 	} while (0)
 
 /* instruction has only one source operand, destination is implicit (e.g. mul, div, imul, idiv) */
