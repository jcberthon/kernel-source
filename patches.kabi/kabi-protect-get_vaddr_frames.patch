From: Jiri Slaby <jslaby@suse.cz>
Subject: kABI: protect get_vaddr_frames
Patch-mainline: never, kabi
References: kabi

In 4.4.168, commit 3ec22a6bce3f06aa3b8a399ea456fb1cb3792584 (mm:
replace get_vaddr_frames() write/force parameters with gup_flags),
upstream commit 7f23b3504a0df63b724180262c5f3f117f21bcae changed
parameters of get_vaddr_frames. It made the kABI checker to complain.

Reintroduce the old function with the old semantics and rename the new
to get_vaddr_frames4.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 drivers/gpu/drm/exynos/exynos_drm_g2d.c    |    2 +-
 drivers/media/platform/omap/omap_vout.c    |    2 +-
 drivers/media/v4l2-core/videobuf2-memops.c |    2 +-
 include/linux/mm.h                         |    2 ++
 mm/frame_vector.c                          |   17 ++++++++++++++++-
 5 files changed, 21 insertions(+), 4 deletions(-)

--- a/drivers/gpu/drm/exynos/exynos_drm_g2d.c
+++ b/drivers/gpu/drm/exynos/exynos_drm_g2d.c
@@ -471,7 +471,7 @@ static dma_addr_t *g2d_userptr_get_dma_a
 		goto err_free;
 	}
 
-	ret = get_vaddr_frames(start, npages, FOLL_FORCE | FOLL_WRITE,
+	ret = get_vaddr_frames4(start, npages, FOLL_FORCE | FOLL_WRITE,
 		g2d_userptr->vec);
 	if (ret != npages) {
 		DRM_ERROR("failed to get user pages from userptr.\n");
--- a/drivers/media/platform/omap/omap_vout.c
+++ b/drivers/media/platform/omap/omap_vout.c
@@ -214,7 +214,7 @@ static int omap_vout_get_userptr(struct
 	if (!vec)
 		return -ENOMEM;
 
-	ret = get_vaddr_frames(virtp, 1, FOLL_WRITE, vec);
+	ret = get_vaddr_frames4(virtp, 1, FOLL_WRITE, vec);
 	if (ret != 1) {
 		frame_vector_destroy(vec);
 		return -EINVAL;
--- a/drivers/media/v4l2-core/videobuf2-memops.c
+++ b/drivers/media/v4l2-core/videobuf2-memops.c
@@ -53,7 +53,7 @@ struct frame_vector *vb2_create_framevec
 	vec = frame_vector_create(nr);
 	if (!vec)
 		return ERR_PTR(-ENOMEM);
-	ret = get_vaddr_frames(start & PAGE_MASK, nr, flags, vec);
+	ret = get_vaddr_frames4(start & PAGE_MASK, nr, flags, vec);
 	if (ret < 0)
 		goto out_destroy;
 	/* We accept only complete set of PFNs */
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1285,6 +1285,8 @@ struct frame_vector {
 struct frame_vector *frame_vector_create(unsigned int nr_frames);
 void frame_vector_destroy(struct frame_vector *vec);
 int get_vaddr_frames(unsigned long start, unsigned int nr_pfns,
+		     bool write, bool force, struct frame_vector *vec);
+int get_vaddr_frames4(unsigned long start, unsigned int nr_pfns,
 		     unsigned int gup_flags, struct frame_vector *vec);
 void put_vaddr_frames(struct frame_vector *vec);
 int frame_vector_to_pages(struct frame_vector *vec);
--- a/mm/frame_vector.c
+++ b/mm/frame_vector.c
@@ -30,7 +30,7 @@
  *
  * This function takes care of grabbing mmap_sem as necessary.
  */
-int get_vaddr_frames(unsigned long start, unsigned int nr_frames,
+int get_vaddr_frames4(unsigned long start, unsigned int nr_frames,
 		     unsigned int gup_flags, struct frame_vector *vec)
 {
 	struct mm_struct *mm = current->mm;
@@ -92,8 +92,23 @@ out:
 		vec->nr_frames = ret;
 	return ret;
 }
+EXPORT_SYMBOL(get_vaddr_frames4);
+
+int get_vaddr_frames(unsigned long start, unsigned int nr_pfns,
+		     bool write, bool force, struct frame_vector *vec)
+{
+	unsigned int gup_flags = 0;
+
+	if (write)
+		gup_flags |= FOLL_WRITE;
+	if (force)
+		gup_flags |= FOLL_FORCE;
+
+	return  get_vaddr_frames4(start, nr_pfns, gup_flags, vec);
+}
 EXPORT_SYMBOL(get_vaddr_frames);
 
+
 /**
  * put_vaddr_frames() - drop references to pages if get_vaddr_frames() acquired
  *			them
