From: Andrew Pinski <apinski@cavium.com>
Subject: revert: arm64: Add workaround for Cavium erratum 27456
Patch-mainline: Never, revert to re-apply in order
References: internal

[ Upstream commit 104a0c02e8b1936c049e18a6d4e4ab040fb61213 ]

On ThunderX T88 pass 1.x through 2.1 parts, broadcast TLBI
instructions may cause the icache to become corrupted if it contains
data for a non-current ASID.

This patch implements the workaround (which invalidates the local
icache when switching the mm) by using code patching.

Signed-off-by: Andrew Pinski <apinski@cavium.com>
Signed-off-by: David Daney <david.daney@cavium.com>
Reviewed-by: Will Deacon <will.deacon@arm.com>
Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Acked-by: Jeff Mahoney <jeffm@suse.com>
 arch/arm64/Kconfig                  | 11 +++++++++++
 arch/arm64/include/asm/cpufeature.h |  3 ++-
 arch/arm64/kernel/cpu_errata.c      |  9 +++++++++
 arch/arm64/mm/proc.S                | 12 ++++++++++++
 4 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 871f21783866..c7236d1a3f64 100644
--- b/arch/arm64/Kconfig
+++ a/arch/arm64/Kconfig
@@ -401,17 +401,6 @
 
 	  If unsure, say Y.
 
-config CAVIUM_ERRATUM_27456
-	bool "Cavium erratum 27456: Broadcast TLBI instructions may cause icache corruption"
-	default y
-	help
-	  On ThunderX T88 pass 1.x through 2.1 parts, broadcast TLBI
-	  instructions may cause the icache to become corrupted if it
-	  contains data for a non-current ASID.  The fix is to
-	  invalidate the icache when changing the mm context.
-
-	  If unsure, say Y.
-
 endmenu
 
 
diff --git a/arch/arm64/include/asm/cpufeature.h b/arch/arm64/include/asm/cpufeature.h
index 8f271b83f910..8136afc9df0d 100644
--- b/arch/arm64/include/asm/cpufeature.h
+++ a/arch/arm64/include/asm/cpufeature.h
@@ -30,9 +30,8 @
 #define ARM64_HAS_LSE_ATOMICS			5
 #define ARM64_WORKAROUND_CAVIUM_23154		6
 #define ARM64_WORKAROUND_834220			7
-#define ARM64_WORKAROUND_CAVIUM_27456		8
 
+#define ARM64_NCAPS				8
-#define ARM64_NCAPS				9
 
 #ifndef __ASSEMBLY__
 
diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index feb6b4efa641..a3e846a28b05 100644
--- b/arch/arm64/kernel/cpu_errata.c
+++ a/arch/arm64/kernel/cpu_errata.c
@@ -99,15 +99,6 @
 		.capability = ARM64_WORKAROUND_CAVIUM_23154,
 		MIDR_RANGE(MIDR_THUNDERX, 0x00, 0x01),
 	},
-#endif
-#ifdef CONFIG_CAVIUM_ERRATUM_27456
-	{
-	/* Cavium ThunderX, T88 pass 1.x - 2.1 */
-		.desc = "Cavium erratum 27456",
-		.capability = ARM64_WORKAROUND_CAVIUM_27456,
-		MIDR_RANGE(MIDR_THUNDERX, 0x00,
-			   (1 << MIDR_VARIANT_SHIFT) | 1),
-	},
 #endif
 	{
 	}
diff --git a/arch/arm64/mm/proc.S b/arch/arm64/mm/proc.S
index 1f6bb29ca53b..18201e9e8cc7 100644
--- b/arch/arm64/mm/proc.S
+++ a/arch/arm64/mm/proc.S
@@ -25,8 +25,6 @
 #include <asm/hwcap.h>
 #include <asm/pgtable-hwdef.h>
 #include <asm/pgtable.h>
-#include <asm/cpufeature.h>
-#include <asm/alternative.h>
 
 #include "proc-macros.S"
 
@@ -139,17 +137,7 @
 	bfi	x0, x1, #48, #16		// set the ASID
 	msr	ttbr0_el1, x0			// set TTBR0
 	isb
-alternative_if_not ARM64_WORKAROUND_CAVIUM_27456
 	ret
-	nop
-	nop
-	nop
-alternative_else
-	ic	iallu
-	dsb	nsh
-	isb
-	ret
-alternative_endif
 ENDPROC(cpu_do_switch_mm)
 
 	.section ".text.init", #alloc, #execinstr

