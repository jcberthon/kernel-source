From c1bf274f92b8f62a9f9f81659bbf27e93792c2fd Mon Sep 17 00:00:00 2001
From: Peter Zijlstra <peterz@infradead.org>
Date: Mon, 3 Oct 2016 16:44:25 +0200
Subject: [PATCH 04/11] sched: Add missing update_rq_clock() call in
 set_user_nice()
Git-commit: 2fb8d36787affe26f3536c3d8ec094995a48037d
Patch-mainline: v4.11-rc1
References: bsc#981825

4------------[ cut here ]------------
4WARNING: CPU: 30 PID: 195 at ../kernel/sched/sched.h:797 set_next_entity+0x37e/0x590
rq->clock_update_flags < RQCF_ACT_SKIPdModules linked in:
dCPU: 30 PID: 195 Comm: kworker/30:0H Not tainted 4.8.0-00637-g67223e2-dirty #555
dHardware name: Intel Corporation S2600GZ/S2600GZ, BIOS SE5C600.86B.02.02.0002.122320131210 12/23/2013
 ffffc9000396bcb0 ffffffff816152e5 ffffc9000396bd00 0000000000000000
 ffffc9000396bcf0 ffffffff810d5bab 0000031d0396bcd8 ffff88082899ad80
 ffff88042fc57b68 ffff88042fc57b00 0000000000000000 ffffc9000396be28
Call Trace:
 [<ffffffff816152e5>] dump_stack+0x67/0x92
 [<ffffffff810d5bab>] __warn+0xcb/0xf0
 [<ffffffff810d5c1f>] warn_slowpath_fmt+0x4f/0x60
 [<ffffffff810fe789>] ? _sched_setscheduler+0x69/0x70
 [<ffffffff810f58a2>] ? kthread_create_on_node+0x142/0x180
 [<ffffffff8110e1de>] set_next_entity+0x37e/0x590
 [<ffffffff81a89727>] ? _raw_spin_lock+0x17/0x40
 [<ffffffff8110e416>] set_curr_task_fair+0x26/0x40
 [<ffffffff810febe2>] set_user_nice.part.85+0x182/0x230
 [<ffffffff810fecb6>] set_user_nice+0x26/0x30
 [<ffffffff810efa81>] create_worker+0xe1/0x190
 [<ffffffff810f02ed>] worker_thread+0x31d/0x4e0
 [<ffffffff810effd0>] ? process_one_work+0x4a0/0x4a0
 [<ffffffff810f5b8a>] kthread+0xca/0xe0
 [<ffffffff81a8961c>] ? _raw_spin_unlock_irq+0x1c/0x30
 [<ffffffff810f5ac0>] ? kthread_park+0x60/0x60
 [<ffffffff81a89bc7>] ret_from_fork+0x27/0x40
4---[ end trace 7223d2ff8d4fa9a0 ]---

Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Signed-off-by: Matt Fleming <mfleming@suse.de>
---
 kernel/sched/core.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 67d3258..6e35eb2 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3761,6 +3761,8 @@ void set_user_nice(struct task_struct *p, long nice)
 	 * the task might be in the middle of scheduling on another CPU.
 	 */
 	rq = task_rq_lock(p, &flags);
+	update_rq_clock(rq);
+
 	/*
 	 * The RT priorities are set via sched_setscheduler(), but we still
 	 * allow the 'normal' nice value to be set - but as expected
-- 
2.10.0

