Subject: hpwdt calculate reload value on each use
From: David Bond <dbond@suse.com>
Patch-mainline: never, SUSE specific 
References: bsc#1114417

Partial port of mainline commit 0458f403fee34 to fix bug where
calling hpwdt_settimeout() doesn't work due to missing logic
in ping function. As hpwdt_settimeout() calls/relies on hpwdt_ping()
to actually write the new timer value into the hardware register.
Also results in closer alignment with mainline driver.

Signed-off-by: David Bond <dbond@suse.com>

diff --git a/drivers/watchdog/hpwdt.c b/drivers/watchdog/hpwdt.c
index 8ee982be58d1..9867111aeae0 100644
--- a/drivers/watchdog/hpwdt.c
+++ b/drivers/watchdog/hpwdt.c
@@ -34,7 +34,6 @@
 
 static bool ilo5;
 static unsigned int soft_margin = DEFAULT_MARGIN;	/* in seconds */
-static unsigned int reload;			/* the computed soft_margin */
 static bool nowayout = WATCHDOG_NOWAYOUT;
 #ifdef CONFIG_HPWDT_NMI_DECODING
 static unsigned int allow_kdump = 1;
@@ -58,7 +57,7 @@ MODULE_DEVICE_TABLE(pci, hpwdt_devices);
  */
 static int hpwdt_start(struct watchdog_device *wdd)
 {
-	reload = SECS_TO_TICKS(wdd->timeout);
+	int reload = SECS_TO_TICKS(wdd->timeout);
 
 	iowrite16(reload, hpwdt_timer_reg);
 	iowrite8(0x85, hpwdt_timer_con);
@@ -84,7 +83,10 @@ static int hpwdt_stop_core(struct watchdog_device *wdd)
 
 static int hpwdt_ping(struct watchdog_device *wdd)
 {
+	int reload = SECS_TO_TICKS(wdd->timeout);
+
 	iowrite16(reload, hpwdt_timer_reg);
+
 	return 0;
 }
 
