From 0acfa09b47c15a9a25fd9ec91a007daf793580ce Mon Sep 17 00:00:00 2001
From: Peter Zijlstra <peterz@infradead.org>
Date: Mon, 3 Oct 2016 16:20:59 +0200
Subject: [PATCH 01/11] sched: Add missing update_rq_clock() in
 post_init_entity_util_avg().
Git-commit: 4126bad6717336abe5d666440ae15555563ca53f
Patch-mainline: v4.11-rc1
References: bsc#981825

WARNING: CPU: 0 PID: 0 at ../kernel/sched/sched.h:797 post_init_entity_util_avg+0x175/0x180
rq->clock_update_flags < RQCF_ACT_SKIPdModules linked in:
dCPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.8.0-00637-g67223e2-dirty #552
dHardware name: Intel Corporation S2600GZ/S2600GZ, BIOS SE5C600.86B.02.02.0002.122320131210 12/23/2013
 ffffffff82203d88 ffffffff81615285 ffffffff82203dd8 0000000000000000
 ffffffff82203dc8 ffffffff810d5bab 0000031d8220b4c0 0000000000000200
 ffff88042f817b68 ffff88042dbf0080 ffff88042f817b00 ffffffff82515440
Call Trace:
 [<ffffffff81615285>] dump_stack+0x67/0x92
 [<ffffffff810d5bab>] __warn+0xcb/0xf0
 [<ffffffff810d5c1f>] warn_slowpath_fmt+0x4f/0x60
 [<ffffffff8110fa25>] post_init_entity_util_avg+0x175/0x180
 [<ffffffff811013d7>] wake_up_new_task+0xf7/0x240
 [<ffffffff810d4eea>] _do_fork+0x12a/0x3b0
 [<ffffffff8118a35f>] ? ftrace_process_locs+0x32f/0x430
 [<ffffffff810d5199>] kernel_thread+0x29/0x30
 [<ffffffff81a7d862>] rest_init+0x22/0x90
 [<ffffffff8239ff28>] start_kernel+0x403/0x410
 [<ffffffff8239f28f>] x86_64_start_reservations+0x2a/0x2c
 [<ffffffff8239f409>] x86_64_start_kernel+0x178/0x18b
4---[ end trace dab466e88c65317a ]---

Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Signed-off-by: Matt Fleming <mfleming@suse.de>
---
 kernel/sched/core.c | 1 +
 kernel/sched/fair.c | 1 +
 2 files changed, 2 insertions(+)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index c6c8b34..030ac69 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -2661,6 +2661,7 @@ void wake_up_new_task(struct task_struct *p)
 #endif
 	/* Post initialize new task's util average when its cfs_rq is set */
 	rq = __task_rq_lock(p);
+	update_rq_clock(rq);
 	post_init_entity_util_avg(&p->se);
 
 	activate_task(rq, p, 0);
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 057fc20..bfa1e44 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -8571,6 +8571,7 @@ int alloc_fair_sched_group(struct task_group *tg, struct task_group *parent)
 		init_entity_runnable_average(se);
 
 		raw_spin_lock_irq(&rq->lock);
+		update_rq_clock(rq);
 		post_init_entity_util_avg(se);
 		raw_spin_unlock_irq(&rq->lock);
 	}
-- 
2.10.0

