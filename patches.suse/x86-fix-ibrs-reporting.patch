From: Borislav Petkov <bp@suse.de>
Subject: x86/spec_ctrl: Fix spec_ctrl reporting
Patch-mainline: never, SUSE specific
References: bsc#1106913, bsc#1111516

We do sport the out-of-tree IBRS fun. Fix IBRS reporting on SKL. Also do minor
cleanup to the string formatting. Final result:

[    0.420512] Spectre V2 : Mitigation: IBRS+IBPB
[    0.425682] Spectre V2 : Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch
[    0.435237] Spectre V2 : Mitigation: Enabling Indirect Branch Prediction Barrier
[    0.443823] Spectre V2 : Enabling Restricted Speculation for firmware calls
[    0.451810] Spectre V2 : Spectre v2 cross-process SMT mitigation: Enabling STIBP
[    0.460398] Speculative Store Bypass: Vulnerable


Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/kernel/cpu/bugs.c |   25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)

--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@ -140,6 +140,7 @@ static const char *spectre_v2_strings[]
 	[SPECTRE_V2_RETPOLINE_MINIMAL_AMD]	= "Vulnerable: Minimal AMD ASM retpoline",
 	[SPECTRE_V2_RETPOLINE_GENERIC]		= "Mitigation: Full generic retpoline",
 	[SPECTRE_V2_RETPOLINE_AMD]		= "Mitigation: Full AMD retpoline",
+	[SPECTRE_V2_IBRS]			= "Mitigation: IBRS+IBPB",
 };
 
 #undef pr_fmt
@@ -418,6 +419,17 @@ retpoline_auto:
 		setup_force_cpu_cap(X86_FEATURE_RETPOLINE);
 	}
 
+	if (!is_skylake_era()) {
+		pr_info("Retpolines enabled, force-disabling IBRS due to !SKL-era core\n");
+		ibrs_state = 0;
+	} else if (ibrs_state != 0) {
+		/*
+		 * SKL without force-disabled IBRS, see
+		 * spectre_v2_parse_cmdline().
+		 */
+		mode = SPECTRE_V2_IBRS;
+	}
+
 	spectre_v2_enabled = mode;
 	pr_info("%s\n", spectre_v2_strings[mode]);
 
@@ -432,15 +444,10 @@ retpoline_auto:
 	setup_force_cpu_cap(X86_FEATURE_RSB_CTXSW);
 	pr_info("Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch\n");
 
-	if (!is_skylake_era()) {
-		pr_info("Retpolines enabled, force-disabling IBRS due to !SKL-era core\n");
-		ibrs_state = 0;
-	}
-
 	/* Initialize Indirect Branch Prediction Barrier if supported */
 	if (boot_cpu_has(X86_FEATURE_IBPB) && ibpb_state != 0) {
 		setup_force_cpu_cap(X86_FEATURE_USE_IBPB);
-		pr_info("Spectre v2 mitigation: Enabling Indirect Branch Prediction Barrier\n");
+		pr_info("Mitigation: Enabling Indirect Branch Prediction Barrier\n");
 	}
 
 	/*
@@ -849,9 +856,9 @@ static ssize_t cpu_show_common(struct de
 		return sprintf(buf, "Mitigation: __user pointer sanitization\n");
 
 	case X86_BUG_SPECTRE_V2:
-		if (boot_cpu_has(X86_FEATURE_SPEC_CTRL) && x86_ibrs_enabled())
-			return sprintf(buf, "Mitigation: IBRS+IBPB\n");
-		ret = sprintf(buf, "%s%s%s%s%s\n", spectre_v2_strings[spectre_v2_enabled],
+		ret = sprintf(buf, "%s%s%s%s%s\n",
+			      (x86_ibrs_enabled() ? "Mitigation: IBRS+IBPB"
+						  : spectre_v2_strings[spectre_v2_enabled]),
 			       boot_cpu_has(X86_FEATURE_USE_IBPB) && x86_ibpb_enabled() ? ", IBPB" : "",
 			       boot_cpu_has(X86_FEATURE_USE_IBRS_FW) ? ", IBRS_FW" : "",
 			       boot_cpu_has(X86_FEATURE_RSB_CTXSW) ? ", RSB filling" : "",
