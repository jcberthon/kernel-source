From: Jiri Kosina <jkosina@suse.cz>
Subject: x86/spectre_v2: fix ordering in IBRS initialization
Patch-mainline: Not yet, under development
References: bsc#1075994 bsc#1075091

The current ordering is first checking nospec earlyparam and setting
ibrp_state and ibrs_state to 0 and only after that the cpiod_edx(7) && BIT(26)
(IBRS availability) is being checked in the CPUID (x86_spec_check()),
overriding the setting that happened in nospec().

Fix that by initializing both flags to -1 (which really means
'unknown/uninitialized'), and make decisions in x86_spec_check() according
to it, IOW enable the features unconditionally. if nospec() later decides
that they should be disabled, it will apply the settings properly.

Signed-off-by: Jiri Kosina <jkosina@suse.cz>
---
 arch/x86/kernel/cpu/spec_ctrl.c |   23 +++++++++++++++++++----
 1 file changed, 19 insertions(+), 4 deletions(-)

--- a/arch/x86/kernel/cpu/spec_ctrl.c
+++ b/arch/x86/kernel/cpu/spec_ctrl.c
@@ -9,19 +9,25 @@
 
 /*
  * Keep it open for more flags in case needed.
+ *
+ * -1 means "not touched by nospec() earlyparam"
  */
-static unsigned int ibrs_state = 0;
-static unsigned int ibpb_state = 0;
+static int ibrs_state = -1;
+static int ibpb_state = -1;
 
 unsigned int notrace x86_ibrs_enabled(void)
 {
-	return ibrs_state;
+	if (ibrs_state != 1)
+		return 0;
+	return 1;
 }
 EXPORT_SYMBOL_GPL(x86_ibrs_enabled);
 
 unsigned int notrace x86_ibpb_enabled(void)
 {
-	return ibpb_state;
+	if (ibpb_state != 1)
+		return 0;
+	return 1;
 }
 EXPORT_SYMBOL_GPL(x86_ibpb_enabled);
 
@@ -44,17 +50,26 @@ EXPORT_SYMBOL_GPL(x86_enable_ibrs);
  */
 void x86_spec_check(void)
 {
+
+	if (ibrs_state == 0 || ibpb_state == 0) {
+		printk_once(KERN_INFO "IBRS/IBPB: disabled\n");
+		return;
+	}
+
 	if (cpuid_edx(7) & BIT(26)) {
 		ibrs_state = 1;
 		ibpb_state = 1;
 
 		setup_force_cpu_cap(X86_FEATURE_SPEC_CTRL);
 		setup_force_cpu_cap(X86_FEATURE_MSR_SPEC_CTRL);
+
+		printk_once(KERN_INFO "IBRS/IBPB: Initialized\n");
 	}
 
 	if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD) {
 		if (cpuid_ebx(0x80000008) & BIT(12)) {
 			ibpb_state = 1;
+			printk_once(KERN_INFO "IBPB: Initialized\n");
 		} else {
 			ibpb_state = 0;
 		}
