From 19bf3679f6a2605467efb69b273dd4cb9da0dd05 Mon Sep 17 00:00:00 2001
From: Will Deacon <will.deacon@arm.com>
Date: Wed, 21 Feb 2018 12:59:27 +0000
Subject: [PATCH 3/3] arm64: Enforce BBM for huge IO/VMAP mappings

Git-commit: 15122ee2c515a253b0c66a3e618bc7ebe35105eb
Patch-mainline: v4.16-rc3
References: bsc#1088313

ioremap_page_range doesn't honour break-before-make and attempts to put
down huge mappings (using p*d_set_huge) over the top of pre-existing
table entries. This leads to us leaking page table memory and also gives
rise to TLB conflicts and spurious aborts, which have been seen in
practice on Cortex-A75.

Until this has been resolved, refuse to put block mappings when the
existing entry is found to be present.

Fixes: 324420bf91f60 ("arm64: add support for ioremap() block mappings")
Reported-by: Hanjun Guo <hanjun.guo@linaro.org>
Reported-by: Lei Li <lious.lilei@hisilicon.com>
Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Signed-off-by: Will Deacon <will.deacon@arm.com>
Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
Signed-off-by: Mian Yousaf Kaukab <yousaf.kaukab@suse.com>
---
 arch/arm64/mm/mmu.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/arch/arm64/mm/mmu.c b/arch/arm64/mm/mmu.c
index 8fbf10c801e4..06ff07c30528 100644
--- a/arch/arm64/mm/mmu.c
+++ b/arch/arm64/mm/mmu.c
@@ -898,6 +898,10 @@ int __init arch_ioremap_pmd_supported(void)
 	pgprot_t sect_prot = __pgprot(PUD_TYPE_SECT |
 					pgprot_val(mk_sect_prot(prot)));
 
+	/* ioremap_page_range doesn't honour BBM */
+	if (pud_present(*pud))
+		return 0;
+
 	BUG_ON(phys & ~PUD_MASK);
 	set_pud(pud, pfn_pud(__phys_to_pfn(phys), sect_prot));
 	return 1;
@@ -905,6 +909,10 @@ int pud_set_huge(pud_t *pud, phys_addr_t phys, pgprot_t prot)
 	pgprot_t sect_prot = __pgprot(PMD_TYPE_SECT |
 					pgprot_val(mk_sect_prot(prot)));
 
+	/* ioremap_page_range doesn't honour BBM */
+	if (pmd_present(*pmd))
+		return 0;
+
 	BUG_ON(phys & ~PMD_MASK);
 	set_pmd(pmd, pfn_pmd(__phys_to_pfn(phys), sect_prot));
 	return 1;
-- 
2.11.0

